
## tests.py ( section 5. dans l'article )

import re
import grammars
import pcfg_bcl
import numpy as np
from grammars import generate_from_grammar as gen
from nltk import sent_tokenize, word_tokenize
from nltk.parse import ChartParser
from collections import Counter

#
#   FONCTIONS
#------------------------------------

#precision: the percentage of sentences generated by the learned grammar
# . . . . . that are accepted by the target grammar
#recall: the percentage of sentences generated by the target grammar
# . . . . . that are accepted by the learned grammar,
#F-score: the harmonic mean of precision and recall

def test_parsing(corpus, grammar):
    ## parsing
    parser = ChartParser(grammar)
    res = []
    for sent in sent_tokenize(corpus):
        sent = re.sub(r'[^\w\s]', '', sent)
        try:
            tree = next(parser.parse(word_tokenize(sent)))
            res.append(True) # phrase acceptée
#        print(tree) # DEBUG
        except Exception:
            res.append(False) # phrase rejetée
    counter = Counter(res)
    counter_sum = sum([counter[x] for x in counter])
    counter_sum = 1 if counter_sum == 0 else counter_sum # pour éviter ZeroDivisionError
    score = counter[True]/counter_sum
    return {"score" : score, "counter" : counter}

def harmonic_mean(scores):
    scores = np.array(scores)
    return (np.sum(scores**-1)/len(scores))**-1

def test_pcfg_bcl(nb_tests, lc, tg, gen_n, gen_depth):
    precison, recall, f_score = [], [], []
    for i in range(nb_tests):
        learned_grammar = pcfg_bcl.pcfg_bcl(lc, gd_thr=200) # induction
        text = gen(learned_grammar, n=gen_n, depth=gen_depth) # génération
        ## scores
        pre = test_parsing(text, tg)["score"]
        rec = test_parsing(lc, learned_grammar)["score"]
        precison.append(pre)
        recall.append(rec)
        f_score.append(harmonic_mean([pre, rec]))
    return precison, recall, f_score

def display_scores(scores):
    precison, recall, f_score = scores[0], scores[1], scores[2]
    ## scores (moyenne sur plusieurs tests)
    print("\nPrecison = %.1f (%.0f)\nRecall = %.1f (%.0f)\nF-score = %.1f (%.0f)" % (
          100*np.average(precison), np.std(precison), 100*np.average(recall),
          np.std(recall), 100*np.average(f_score), np.std(f_score)))
    
#
#   GRAMMAIRES/TESTS
#------------------------------------

#   Baseline ( ex: the circle touches a triangle. )
#
target_grammar, corpus = grammars.baseline() # grammaire cible, corpus
learned_grammar = pcfg_bcl.pcfg_bcl(corpus) # induction
text = gen(learned_grammar, depth=8) # génération
## tests
res = test_pcfg_bcl(50, corpus, target_grammar, 500, 8)
display_scores(res)
#Precison = 90.0 (0)
#Recall = 100.0 (0)
#F-score = 93.3 (0)

#   Num-arg ( ex: the circles are below the square. )
#
target_grammar, corpus = grammars.num_agr(depth=7) # grammaire cible, corpus
learned_grammar = pcfg_bcl.pcfg_bcl(corpus) # induction
text = gen(learned_grammar, depth=8) # génération
## tests
res = test_pcfg_bcl(50, corpus, target_grammar, 500, 8)
display_scores(res)
#Precison = 45.5 (0)
#Recall = 100.0 (0)
#F-score = 61.8 (0)

#   Langley1 ( ex: the big old cat saw the old dog. )
#
target_grammar, corpus = grammars.langley_1(n=200, depth=6) # grammaire cible, corpus
learned_grammar = pcfg_bcl.pcfg_bcl(corpus, alpha=1, gd_thr=250) # induction
text = gen(learned_grammar, n=200, depth=10) # génération
## tests
res = test_pcfg_bcl(50, corpus, target_grammar, 200, 10)
display_scores(res)
#Precison = 88.0 (0)
#Recall = 100.0 (0)
#F-score = 89.4 (0)

#   Langley2 ( ex: a mouse heard a mouse. )
#
target_grammar, corpus = grammars.langley_2(n=500, depth=6) # grammaire cible, corpus
learned_grammar = pcfg_bcl.pcfg_bcl(corpus) # induction
text = gen(learned_grammar) # génération
## tests
res = test_pcfg_bcl(50, corpus, target_grammar, 999, 50)
display_scores(res)
#Precison = 100.0 (0)
#Recall = 100.0 (0)
#F-score = 100.0 (0)

#   Emile2k, TA1 (non trouvées)
#   ...........................

#
#   AFFICHAGES
#------------------------------------

## scores (one shot)
precison = test_parsing(text, target_grammar)["score"]
recall = test_parsing(corpus, learned_grammar)["score"]
f_score = harmonic_mean([precison, recall])
print("Precison = %.3f\nRecall = %.3f\nF-score = %.3f" %
      (precison, recall, f_score))

## affichages: grammaires et corpus
print("\n> grammaire induite:\n\n", learned_grammar)
print("\n> grammaire cible:\n\n", target_grammar)
print("\n> corpus généré:\n\n", text)
print("\n> corpus original:\n\n", corpus)

#
#   DEBUG
#------------------------------------

for b in sorted(pcfg_bcl.biclusters.keys(), key=lambda x: x[0]):
    print("\n> "+b[0]+" -> "+b[1]+" "+b[2]+"   ________\n")
    print(pcfg_bcl.biclusters[b])

